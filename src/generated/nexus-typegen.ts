/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../api/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AcquireCS: { // root type
    acquiredAt: string; // String!
    id: number; // Int!
    ip: string; // String!
    sourceIp: string; // String!
  }
  Client: { // root type
    connected: boolean; // Boolean!
    id: number; // Int!
    ip: string; // String!
    name: string; // String!
    requestParent: NexusGenRootTypes['RequestParent']; // RequestParent!
  }
  Mutation: {};
  Query: {};
  RequestCS: { // root type
    id: number; // Int!
    parentIp: string; // String!
    relayed: boolean; // Boolean!
    requestedAt: string; // String!
    sourceIp: string; // String!
  }
  RequestParent: { // root type
    clientIp: string; // String!
    id: number; // Int!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AcquireCS: { // field return type
    acquiredAt: string; // String!
    id: number; // Int!
    ip: string; // String!
    sourceIp: string; // String!
  }
  Client: { // field return type
    connected: boolean; // Boolean!
    id: number; // Int!
    ip: string; // String!
    name: string; // String!
    requestParent: NexusGenRootTypes['RequestParent']; // RequestParent!
  }
  Mutation: { // field return type
    createAcquireCS: NexusGenRootTypes['AcquireCS']; // AcquireCS!
    createClient: NexusGenRootTypes['Client']; // Client!
    createRequestCS: NexusGenRootTypes['RequestCS']; // RequestCS!
  }
  Query: { // field return type
    getClients: Array<NexusGenRootTypes['Client'] | null>; // [Client]!
  }
  RequestCS: { // field return type
    id: number; // Int!
    parentIp: string; // String!
    relayed: boolean; // Boolean!
    requestedAt: string; // String!
    sourceIp: string; // String!
  }
  RequestParent: { // field return type
    clientIp: string; // String!
    id: number; // Int!
  }
}

export interface NexusGenFieldTypeNames {
  AcquireCS: { // field return type name
    acquiredAt: 'String'
    id: 'Int'
    ip: 'String'
    sourceIp: 'String'
  }
  Client: { // field return type name
    connected: 'Boolean'
    id: 'Int'
    ip: 'String'
    name: 'String'
    requestParent: 'RequestParent'
  }
  Mutation: { // field return type name
    createAcquireCS: 'AcquireCS'
    createClient: 'Client'
    createRequestCS: 'RequestCS'
  }
  Query: { // field return type name
    getClients: 'Client'
  }
  RequestCS: { // field return type name
    id: 'Int'
    parentIp: 'String'
    relayed: 'Boolean'
    requestedAt: 'String'
    sourceIp: 'String'
  }
  RequestParent: { // field return type name
    clientIp: 'String'
    id: 'Int'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createAcquireCS: { // args
      ip: string; // String!
      sourceIp: string; // String!
    }
    createClient: { // args
      connected: boolean; // Boolean!
      ip: string; // String!
      name: string; // String!
    }
    createRequestCS: { // args
      parentIp: string; // String!
      relayed: boolean; // Boolean!
      sourceIp: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}